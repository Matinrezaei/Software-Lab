/**
* Nsmf_PDUSession
* SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SMContextsCollectionApiImpl.h"
#include "logger.hpp"
#include "smf_msg.hpp"

extern "C" {
#include "nas_message.h"
#include "mmData.h"
#include "common_types.h"
#include "common_defs.h"
}

namespace oai {
namespace smf {
namespace api {

using namespace oai::smf::model;

SMContextsCollectionApiImpl::SMContextsCollectionApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr, pgwc::pgw_app *smf_app_inst)
    : SMContextsCollectionApi(rtr), m_smf_app(smf_app_inst)

    { }

void SMContextsCollectionApiImpl::post_sm_contexts(const SmContextMessage &smContextMessage, Pistache::Http::ResponseWriter &response) {

	nas_message_decode_status_t   decode_status = {0};
	nas_message_t	decoded_nas_msg;
	memset (&decoded_nas_msg, 0, sizeof (nas_message_t));
	int decoder_rc = RETURNok;
	unsigned char data[100] = {'\0'}; //hardcoded for the moment

	Logger::smf_api_server().info("post_sm_contexts...");

	SmContextCreateData smContextCreateData = smContextMessage.getJsonData();
	std::string n1SmMessage = smContextMessage.getBinaryDataN1SmMessage();

       	//Decode and process nas message
	//bsafe (disable temporarily warning for strncpy)
	//std::strncpy((char *)data, n1SmMessage.c_str(), sizeof(data));

    memcpy ((void *)data, (void *)n1SmMessage.c_str(),sizeof(data));

	//use a temporary security mechanism
	fivegmm_security_context_t * security = ( fivegmm_security_context_t *) std::calloc(1,sizeof(fivegmm_security_context_t));
	security->selected_algorithms.encryption = NAS_SECURITY_ALGORITHMS_NEA1;
	security->dl_count.overflow = 0xffff;
	security->dl_count.seq_num =  0x23;
	security->knas_enc[0] = 0x14;
	security->selected_algorithms.integrity = NAS_SECURITY_ALGORITHMS_NIA1;
	security->knas_int[0] = 0x41;

	//decode message
	decoder_rc = nas_message_decode (data, &decoded_nas_msg, sizeof(data), security, &decode_status);

	Logger::smf_api_server().debug("nas header  decode extended_protocol_discriminator %d, security_header_type:%d,sequence_number:%d,message_authentication_code:%d\n",
			decoded_nas_msg.header.extended_protocol_discriminator,
			decoded_nas_msg.header.security_header_type,
			decoded_nas_msg.header.sequence_number,
			decoded_nas_msg.header.message_authentication_code);

	//Get the value from AMF
	//pgwc::pdu_session_create_sm_context_request create_sm_context_request_msg;

	pgwc::pdu_session_create_sm_context_request *sm_context_req = new pgwc::pdu_session_create_sm_context_request();
	std::shared_ptr<pgwc::pdu_session_create_sm_context_request> sm_context_req_msg = std::shared_ptr<pgwc::pdu_session_create_sm_context_request>(sm_context_req);





	sm_context_req_msg->set_dnn(smContextCreateData.getDnn());
	snssai_t snssai(smContextCreateData.getSNssai().getSst(), smContextCreateData.getSNssai().getSd());
	sm_context_req_msg->set_snssai(snssai);
	sm_context_req_msg->set_request_type(smContextCreateData.getRequestType());
	supi_t supi =  {.length = 0};
	smf_string_to_supi(&supi, smContextCreateData.getSupi().c_str());
	//supi64_t supi64 = smf_supi_to_u64(supi);
	sm_context_req_msg->set_supi(supi);

	sm_context_req_msg->set_dnn_selection_mode(smContextCreateData.getSelMode());
	//handle the message from pwg_app
 	m_smf_app->handle_amf_msg(sm_context_req_msg, response);

	/*
	//move the response part to pgw_app
	//step 3. send reply to AMF
	nlohmann::json jsonData;
	to_json(jsonData, smContextCreatedData);
	std::string resBody = jsonData.dump();

	response.headers().add<Pistache::Http::Header::Location>(url);
	response.send(Pistache::Http::Code::Ok, resBody);
	*/
}

}
}
}

