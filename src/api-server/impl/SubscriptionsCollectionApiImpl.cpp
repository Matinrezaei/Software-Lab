/**
* Nsmf_EventExposure
* Session Management Event Exposure Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SubscriptionsCollectionApiImpl.h"

#include "logger.hpp"
#include "smf_msg.hpp"
#include "3gpp_29.508.h"
#include "itti_msg_sbi.hpp"
#include "smf_config.hpp"

extern smf::smf_config smf_cfg;

namespace oai {
namespace smf_server {
namespace api {

using namespace oai::smf_server::model;

SubscriptionsCollectionApiImpl::SubscriptionsCollectionApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr, smf::smf_app *smf_app_inst,
    std::string address)
    :
    SubscriptionsCollectionApi(rtr),
    m_smf_app(smf_app_inst),
    m_address(address) {
}

void SubscriptionsCollectionApiImpl::create_individual_subcription(
    const NsmfEventExposure &nsmfEventExposure,
    Pistache::Http::ResponseWriter &response) {
  Logger::smf_api_server().info(
      "SubscriptionsCollectionApiImpl::create_individual_subcription...");

  //Step1. Create a  message and store the necessary information
  Logger::smf_api_server().debug(
      "Create a Event Exposure message and store the necessary information");
  smf::event_exposure_msg event_exposure = { };

  //Supi
  if (nsmfEventExposure.supiIsSet()) {
    supi_t supi = { .length = 0 };
    std::size_t pos = nsmfEventExposure.getSupi().find("-");
    std::string supi_str = nsmfEventExposure.getSupi().substr(pos + 1);
    std::string supi_prefix = nsmfEventExposure.getSupi().substr(0, pos);
    smf_string_to_supi(&supi, supi_str.c_str());

    event_exposure.set_supi(supi);
    event_exposure.set_supi_prefix(supi_prefix);
    Logger::smf_api_server().debug("SUPI %s, SUPI Prefix %s, IMSI %s",
                                   nsmfEventExposure.getSupi().c_str(),
                                   supi_prefix.c_str(), supi_str.c_str());
  }

  //PDU session ID
  if (nsmfEventExposure.pduSeIdIsSet()) {
    Logger::smf_api_server().debug("PDU Session ID %d",
                                   nsmfEventExposure.getPduSeId());
    event_exposure.set_pdu_session_id(nsmfEventExposure.getPduSeId());
  }

  event_exposure.set_notif_id(nsmfEventExposure.getNotifId());  //NotifId
  event_exposure.set_notif_uri(nsmfEventExposure.getNotifUri());  //NotifUri

  //EventSubscription: TODO
  event_subscription_t event_subscription = { };
  event_subscription.smf_event = smf_event_t::SMF_EVENT_PDU_SES_REL;
  std::vector<event_subscription_t> event_subscriptions = { };
  event_subscriptions.push_back(event_subscription);
  event_exposure.set_event_subs(event_subscriptions);

  //std::vector<EventSubscription> eventSubscriptions;
  //for (auto it: nsmfEventExposure.getEventSubs()){
  //event_subscription.smf_event = it.getEvent();
  //getDnaiChgType
  //event_subscriptions.push_back(event_subscription);
  //}

  //Step 2. Handle the message in smf_app
  std::shared_ptr<itti_sbi_event_exposure_request> itti_msg = std::make_shared
      < itti_sbi_event_exposure_request > (TASK_SMF_N11, TASK_SMF_APP);
  itti_msg->event_exposure = event_exposure;
  itti_msg->http_version = 1;

  evsub_id_t sub_id = m_smf_app->handle_event_exposure_subscription(itti_msg);

  //send response
  nlohmann::json json_data = { };
  to_json(json_data, nsmfEventExposure);

  if (sub_id != -1) {
    json_data["subId"] = std::to_string(sub_id);
    response.headers().add < Pistache::Http::Header::Location
        > (m_address + base + smf_cfg.sbi_api_version + "/nsmf_event-exposure/"
           + std::to_string(sub_id));  //Location header
  }

  response.headers().add < Pistache::Http::Header::ContentType
      > (Pistache::Http::Mime::MediaType("application/json"));
  response.send(Pistache::Http::Code(201), json_data.dump().c_str());
}

}
}
}

